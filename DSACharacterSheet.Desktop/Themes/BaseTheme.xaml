<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:userElements="clr-namespace:DSACharacterSheet.Desktop.UserElements"
                    xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock">

    <FontFamily x:Key="Morpheus">../Resources/#Morpheus</FontFamily>

    <Style x:Key="FrameBorder" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="Margin" Value="5"/>
    </Style>

    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
    </Style>

    <Style x:Key="MorpheusTextStyle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontFamily" Value="{StaticResource Morpheus}"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Background" Value="Black"/>
    </Style>
    
    <Style TargetType="userElements:InfoButton">
        <Setter Property="Margin" Value="5"/>
    </Style>

    <Style TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource BorderColor}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle HorizontalAlignment="Stretch" Fill="{TemplateBinding Background}" Height="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalSeperatorStyle" TargetType="Separator"
           BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
        <Setter Property="Background" Value="{DynamicResource BorderColor}"/>
    </Style>

    <Style TargetType="ToolBarTray">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="IsLocked" Value="True"/>
        <!--<Setter Property="Margin" Value="0 -1 0 0"/>-->
    </Style>

    <Style TargetType="ToolBar">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="OverflowMode" Value="Never"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" Margin="0" SnapsToDevicePixels="True">
                        <Separator Style="{StaticResource VerticalSeperatorStyle}"/>
                        <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Margin" Value="0,0,4,0"/>
                                    <Setter Property="CornerRadius" Value="3"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding}" Value="true">
                                            <Setter Property="CornerRadius" Value="0"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="ToolBarHeader" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                            <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="Margin" Value="0 0 0 -0.1"></Setter>
    </Style>

    <Style TargetType="MenuItem">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="templateRoot"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon"
                                              Content="{TemplateBinding Icon}"
                                              ContentSource="Icon" HorizontalAlignment="Center"
                                              Height="16" Margin="3"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="Center" Width="16"/>
                            <Path x:Name="GlyphPanel"
                                  Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z"
                                  Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight"
                                  Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              Content="{TemplateBinding Header}" Grid.Column="1"
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                              ContentSource="Header" Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False"
                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                   Placement="Bottom" MinWidth="150">
                                <Border x:Name="SubMenuBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1" Background="{TemplateBinding Background}"
                                        Padding="2">
                                    <ScrollViewer x:Name="SubMenuScrollViewer"
                                                  Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect"
                                                           Fill="{Binding Background, ElementName=SubMenuBorder}"
                                                           Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                                           Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <Rectangle Fill="{TemplateBinding Background}"
                                                       HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                                            Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource HighlightBackgroundColor}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource HighlightBorderColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource DisabledForegroundColor}"/>
                            <Setter Property="Fill" TargetName="GlyphPanel" Value="{DynamicResource DisabledBackgroundColor}"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xcad:DockingManager}">
        <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="DocumentPaneControlStyle">
            <Setter.Value>
                <Style TargetType="{x:Type xcad:LayoutDocumentPaneControl}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type xcad:LayoutDocumentPaneControl}">
                                <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border Background="Transparent" Grid.RowSpan="2"/>
                                    <Grid Panel.ZIndex="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.Visibility>
                                            <Binding Path="Model.ShowHeader" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcad:LayoutDocumentPaneControl}}">
                                                <Binding.Converter>
                                                    <xcad:BoolToVisibilityConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Grid.Visibility>
                                        <xcad:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" FlowDirection="LeftToRight" IsItemsHost="True" Grid.Row="0" KeyboardNavigation.TabIndex="1"/>
                                        <xcad:DropDownButton x:Name="MenuDropDownButton" Grid.Column="1" Focusable="False">
                                            <xcad:DropDownButton.DropDownContextMenu>
                                                <xcad:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}" Background="{DynamicResource BackgroundColor}">
                                                    <xcad:ContextMenuEx.ItemContainerStyle>
                                                        <Style TargetType="{x:Type xcad:MenuItemEx}">
                                                            <Setter Property="HeaderTemplate" Value="{Binding Root.Manager.DocumentHeaderTemplate}"/>
                                                            <Setter Property="HeaderTemplateSelector" Value="{Binding Root.Manager.DocumentHeaderTemplateSelector}"/>
                                                            <Setter Property="IconTemplate" Value="{Binding Root.Manager.IconContentTemplate}"/>
                                                            <Setter Property="IconTemplateSelector" Value="{Binding Root.Manager.IconContentTemplateSelector}"/>
                                                            <Setter Property="Command">
                                                                <Setter.Value>
                                                                    <Binding Path=".">
                                                                        <Binding.Converter>
                                                                            <xcad:ActivateCommandLayoutItemFromLayoutModelConverter/>
                                                                        </Binding.Converter>
                                                                    </Binding>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Style.BasedOn>
                                                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                                    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                                                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                    <Setter Property="Margin" Value="-1 0 0 0"/>
                                                                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                    <Style.Triggers>
                                                                        <Trigger Property="Role" Value="TopLevelHeader">
                                                                            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                            <Setter Property="Padding" Value="6,0"/>
                                                                        </Trigger>
                                                                        <Trigger Property="Role" Value="TopLevelItem">
                                                                            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                            <Setter Property="Padding" Value="6,0"/>
                                                                        </Trigger>
                                                                        <Trigger Property="Role" Value="SubmenuHeader">
                                                                            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                        </Trigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Style.BasedOn>
                                                        </Style>
                                                    </xcad:ContextMenuEx.ItemContainerStyle>
                                                </xcad:ContextMenuEx>
                                            </xcad:DropDownButton.DropDownContextMenu>
                                            <xcad:DropDownButton.Style>
                                                <Style TargetType="{x:Type ToggleButton}">
                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                    <Setter Property="Padding" Value="2"/>
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="BorderBrush" Value="Transparent"/>
                                                    <Setter Property="HorizontalAlignment" Value="Center"/>
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                </Border>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                                                                        <Setter Property="Background" Value="{DynamicResource HighlightBackgroundColor}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                                                                        <Setter Property="Background" Value="{DynamicResource HighlightBackgroundColor}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                                                                        <Setter Property="Background" Value="{DynamicResource HighlightBackgroundColor}"/>
                                                                    </Trigger>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                                            <Condition Property="IsChecked" Value="True"/>
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource ForegroundColor}"/>
                                                                        <Setter Property="Background" Value="{DynamicResource HighlightBackgroundColor}"/>
                                                                    </MultiTrigger>
                                                                    <MultiTrigger>
                                                                        <MultiTrigger.Conditions>
                                                                            <Condition Property="IsKeyboardFocused" Value="True"/>
                                                                            <Condition Property="IsChecked" Value="True"/>
                                                                        </MultiTrigger.Conditions>
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                                                                        <Setter Property="Background" Value="{DynamicResource HighlightBackgroundColor}"/>
                                                                    </MultiTrigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                                                                        <Setter Property="Background" Value="{DynamicResource HighlightBackgroundColor}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </xcad:DropDownButton.Style>
                                            <Border Background="Transparent" Height="20">
                                                <Image Source="{DynamicResource ArrowBlockDownIcon}"/>
                                            </Border>
                                        </xcad:DropDownButton>
                                    </Grid>
                                    <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" HorizontalAlignment="Stretch" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Cycle" VerticalAlignment="Stretch">
                                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding Model.ChildrenCount, RelativeSource={RelativeSource Self}}" Value="0">
                                        <Setter Property="Visibility" TargetName="MenuDropDownButton" Value="Collapsed"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemContainerStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type TabItem}">
                                <Setter Property="Visibility">
                                    <Setter.Value>
                                        <Binding Path="IsVisible">
                                            <Binding.Converter>
                                                <xcad:BoolToVisibilityConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                                <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                                <Setter Property="Padding" Value="2,0"/>
                                <Setter Property="Margin" Value="0,2,0,0"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type TabItem}">
                                            <Grid SnapsToDevicePixels="True">
                                                <Border x:Name="Bd" BorderBrush="{DynamicResource BorderColor}" BorderThickness="1,1,1,0" Background="{DynamicResource BackgroundColor}" Padding="{TemplateBinding Padding}">
                                                    <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                </Border>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter Property="Background" Value="{DynamicResource HighlightBackgroundColor}"/>
                                                    <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                                    <Setter Property="Margin" Value="0,0,0,-2"/>
                                                    <Setter Property="Margin" TargetName="Content" Value="0,0,0,3"/>
                                                </Trigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                        <Condition Property="IsSelected" Value="False"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
                                                    <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                                                    <Setter Property="Panel.ZIndex" Value="0"/>
                                                </MultiTrigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <xcad:LayoutDocumentTabItem Model="{Binding}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <xcad:LayoutDocumentControl Model="{Binding}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorablePaneControlStyle">
            <Setter.Value>
                <Style TargetType="{x:Type xcad:LayoutAnchorablePaneControl}">
                    <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}"/>
                    <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}"/>
                    <Setter Property="TabStripPlacement" Value="Bottom"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type xcad:LayoutAnchorablePaneControl}">
                                <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border Background="Transparent" Grid.RowSpan="2"/>
                                    <Border x:Name="ContentPanel"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            Grid.Column="0"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            Grid.Row="0" KeyboardNavigation.TabIndex="2"
                                            KeyboardNavigation.TabNavigation="Cycle">
                                        <ContentPresenter x:Name="PART_SelectedContentHost"
                                                          ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                                                          Content="{TemplateBinding SelectedContent}"
                                                          ContentStringFormat="{TemplateBinding SelectedContentStringFormat}"
                                                          ContentSource="SelectedContent"
                                                          Margin="{TemplateBinding Padding}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                    <xcad:AnchorablePaneTabPanel x:Name="HeaderPanel" FlowDirection="LeftToRight" IsItemsHost="True" Margin="2,0,2,2" Grid.Row="1" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemContainerStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type TabItem}">
                                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                                <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type TabItem}">
                                            <Grid SnapsToDevicePixels="True">
                                                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,1,1" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                                    <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                </Border>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
                                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                                    <Setter Property="Margin" Value="0,-1,-1,-2"/>
                                                </Trigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                        <Condition Property="IsSelected" Value="False"/>
                                                    </MultiTrigger.Conditions>
                                                    <Setter Property="Background" Value="{DynamicResource BackgroundColor}"/>
                                                    <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
                                                    <Setter Property="Panel.ZIndex" Value="0"/>
                                                </MultiTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Items.Count, FallbackValue=1, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="1">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <xcad:LayoutAnchorableTabItem Model="{Binding}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <xcad:LayoutAnchorableControl Model="{Binding}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorSideTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcad:LayoutAnchorSideControl}">
                    <ItemsControl>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel IsItemsHost="True">
                                    <StackPanel.Orientation>
                                        <Binding Path="Model.Side" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcad:LayoutAnchorSideControl}}">
                                            <Binding.Converter>
                                                <xcad:AnchorSideToOrientationConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </StackPanel.Orientation>
                                </StackPanel>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorGroupTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcad:LayoutAnchorGroupControl}">
                    <ItemsControl>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel IsItemsHost="True" Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.LayoutTransform>
                            <RotateTransform>
                                <RotateTransform.Angle>
                                    <Binding Path="Model.Parent.Side" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xcad:AnchorSideToAngleConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </RotateTransform.Angle>
                            </RotateTransform>
                        </ItemsControl.LayoutTransform>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcad:LayoutAnchorControl}">
                    <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="1" Margin="2" Padding="2">
                        <ContentPresenter ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcad:DockingManager}}}" Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorableHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Image x:Name="icon" Stretch="Uniform">
                            <Image.Source>
                                <Binding Path="IconSource">
                                    <Binding.Converter>
                                        <xcad:NullToDoNothingConverter/>
                                    </Binding.Converter>
                                </Binding>
                            </Image.Source>
                        </Image>
                        <TextBlock x:Name="title" Grid.Column="1" Margin="4,0,0,0" Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="title" Value="0"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentTitleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorableTitleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AnchorableContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="{Binding FloatCommand}" Header="Verankerung aufheben"/>
                    <MenuItem Command="{Binding DockCommand}" Header="Andocken"/>
                    <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Als Dokument im Registerkartenformat andocken"/>
                    <MenuItem Command="{Binding AutoHideCommand}" Header="Automatisch im Hintergrund"/>
                    <MenuItem Command="{Binding CloseCommand}" Header="Schließen">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <xcad:BoolToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding HideCommand}" Header="Schließen">
                        <MenuItem.Visibility>
                            <MultiBinding UpdateSourceTrigger="Default">
                                <MultiBinding.Converter>
                                    <xcad:AnchorableContextMenuHideVisibilityConverter/>
                                </MultiBinding.Converter>
                                <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                    <Binding.Converter>
                                        <xcad:BoolToVisibilityConverter/>
                                    </Binding.Converter>
                                </Binding>
                                <Binding Path="CanClose"/>
                            </MultiBinding>
                        </MenuItem.Visibility>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="{Binding CloseCommand}" Header="Schließen">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <xcad:BoolToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding CloseAllButThisCommand}" Header="Alle ausser diesem schließen"/>
                    <MenuItem Command="{Binding CloseAllCommand}" Header="Schließen Sie alle"/>
                    <MenuItem Command="{Binding FloatCommand}" Header="Verankerung aufheben"/>
                    <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Als Dokument andocken"/>
                    <MenuItem Command="{Binding NewHorizontalTabGroupCommand}" Header="Neue horizontale Registerkartengruppe">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <xcad:BoolToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding NewVerticalTabGroupCommand}" Header="Neue vertikale Registerkartengruppe">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <xcad:BoolToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding MoveToNextTabGroupCommand}" Header="Zur nächsten Registerkartengruppe wechseln">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <xcad:BoolToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                    <MenuItem Command="{Binding MoveToPreviousTabGroupCommand}" Header="Zur vorherigen Registerkartengruppe wechseln">
                        <MenuItem.Visibility>
                            <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                <Binding.Converter>
                                    <xcad:BoolToVisibilityConverter/>
                                </Binding.Converter>
                            </Binding>
                        </MenuItem.Visibility>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentPaneMenuItemHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding .}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IconContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Stretch="Uniform" Source="{DynamicResource EditIcon}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xcad:DockingManager}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Grid FlowDirection="LeftToRight">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding RightSidePanel}" Grid.Column="2" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding LeftSidePanel}" Grid.Column="0" Grid.Row="1"/>
                            <ContentPresenter Content="{TemplateBinding TopSidePanel}" Grid.Column="1" Grid.Row="0"/>
                            <ContentPresenter Content="{TemplateBinding BottomSidePanel}" Grid.Column="1" Grid.Row="2"/>
                            <ContentPresenter x:Name="PART_AutoHideArea" Content="{TemplateBinding AutoHideWindow}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Grid.Row="1" VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>